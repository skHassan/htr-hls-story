export default class ApiHelper {
  /**
   * @description defailt fields for api
   */
  private static fieldsFor = {
    videos:
      'id,title,thumbnail_480_url,description,duration,created_time,tags,owner.screenname,owner.avatar_60_url,channel,stream_hls_url'
  }

  /**
   * @description : To fetch videos Info by filter
   * @param {string} apiUrl : api url
   * @param {string} playlistId : playlist id
   * @param {number} num : number of videos
   * @param {number} page : number of page
   * @returns {Promise<any>}
   */
  public static async fetchVideosByPlaylist(
    apiUrl: string,
    playlistId: string,
    num: string = "10",
    page: number = 1
  ): Promise<any> {
    const url = apiUrl + `?playlistId=${playlistId}&fields=${this.fieldsFor.videos}&limit=${num}&page=${page}`
    const videos = await this.fetchData(url)
    return { list: videos.list, has_more: videos.has_more }
  }
  /**
   * @description : To fetch video subtitle by videoId
   * @param videoId : string
   * @returns 
   */
  public static async getSubtitle(videoId: string): Promise<any> {
    const url = `https://api.dailymotion.com/video/${videoId}/subtitles?fields=id,language_label,language,url&page=1&limit=100&autogenerated=yes`
    const subtitles = await this.fetchData(url)
    if (subtitles && subtitles.list && subtitles.list.length > 0) {
      return subtitles.list[0]
    }else{
      console.warn(`No subtitles found for video ID: ${videoId}`)
      return null as any
    }
  }

  /**
   * @description : fetch API data
   * @param {string} urlParams : url of of API
   * @returns {Promise<any>}
   */
  private static async fetchData(urlParams: string): Promise<any> {
    const response = await fetch(urlParams)

    /**
     * Throwing an error if response is not 200
     */
    if (response.status !== 200) {
      throw new Error('Network response was not ok')
    }

    return response.json()
  }
}
